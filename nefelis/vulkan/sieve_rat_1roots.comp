// Sieve on rational side.
//
// Prepare roots: compute roots transformed for the q-sublattice.

#version 450

#extension GL_EXT_control_flow_attributes : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Enumeration of prime base and roots
layout(binding = 0) readonly buffer Primes { uint primes[]; };
layout(binding = 1) readonly buffer Roots { int roots[]; };
layout(binding = 2) readonly buffer QBasis { ivec4 q; };
layout(binding = 3) writeonly buffer QRoots { uint qroots[]; };

#include <arith.comp>

void doprime(uint pidx) {
  const uint p = primes[pidx];
  const uint logp = findMSB(p);
  const float pinv = 1.0 / float(p);
  const int r = int(roots[pidx]);
  const int rx = (r == p) ? 1 : r;
  const int ry = (r == p) ? 0 : 1;

  int64_t qqx = int64_t(q.w) * int64_t(rx) - int64_t(q.y) * int64_t(ry);
  int64_t qqy = int64_t(q.x) * int64_t(ry) - int64_t(q.z) * int64_t(rx);
  int qx = int(modp_float(qqx, p, pinv));
  int qy = int(modp_float(qqy, p, pinv));

  const uint qr = (qy == 0) ? p : mulmod(qx, invmod(qy, int(p)), p, pinv);
  qroots[pidx] = qr;
}

void main() {
  const uint pidx = gl_GlobalInvocationID.x;
  if (pidx < primes.length())
    doprime(gl_GlobalInvocationID.x);
}
